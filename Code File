#include <iostream>
#include <vector>
#include <queue>
#include <stack>

using namespace std;

// Direction vectors for moving up, down, left, right
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

bool isValid(int x, int y, const vector<vector<int>>& maze, vector<vector<bool>>& visited) {
    return x >= 0 && x < maze.size() && y >= 0 && y < maze[0].size() &&
           maze[x][y] == 0 && !visited[x][y];
}

// BFS to solve the maze
bool solveMazeBFS(vector<vector<int>>& maze, pair<int, int> start, pair<int, int> end) {
    int rows = maze.size(), cols = maze[0].size();
    vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    queue<pair<int, int>> q;
    q.push(start);
    visited[start.first][start.second] = true;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        // If we reach the end
        if (x == end.first && y == end.second) {
            maze[x][y] = 2; // Mark the end point
            return true;
        }

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i], ny = y + dy[i];
            if (isValid(nx, ny, maze, visited)) {
                q.push({nx, ny});
                visited[nx][ny] = true;
                maze[nx][ny] = 2; // Mark the path
            }
        }
    }
    return false; // No path found
}

int main() {
    // Example maze (0 = path, 1 = wall)
    vector<vector<int>> maze = {
        {0, 1, 0, 0, 0},
        {0, 1, 0, 1, 0},
        {0, 0, 0, 1, 0},
        {1, 1, 0, 1, 0},
        {0, 0, 0, 0, 0}
    };

    pair<int, int> start = {0, 0}; // Start position
    pair<int, int> end = {4, 4};   // End position

    if (solveMazeBFS(maze, start, end)) {
        cout << "Path found:\n";
        for (const auto& row : maze) {
            for (int cell : row) {
                cout << (cell == 2 ? "." : (cell == 1 ? "#" : " ")) << " ";
            }
            cout << "\n";
        }
    } else {
        cout << "No path found.\n";
    }

    return 0;
}
